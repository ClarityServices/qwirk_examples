Step 0
# Follow the directions for configuring configuring a jms, in_memory, or inline adapter located in ../SETUP

Step 1
# Start up the application
rm -f qwirk_persist.yml
rackup


Step 2
# Browse to http://localhost:9292
# Open up the tree to Worker => Bar => Attributes and click on Attributes
# Change max_count to 100, idle_worker_timeout to 10, and sleep_time to 5 and click Update.
  Note that for inline adapter, use active=true instead of max_count.

Step 3
# Open the tree to Publisher => Operations => send_bar and click on send_bar
# Set count to 1000 and sleep_time to 0.2 and click Execute.
# Click back on Worker => Bar => Attributes and continue clicking every few seconds while
  messages are still being published.  For the InMem adapter, workers will continue
  to increase while there are still messages in the queue.  For the ActiveMQ adapter,
  the messages get cached on the consumer side so after the the publishing is complete,
  many of the workers will drop off while the remaining ones that have cached messages
  will continue.

Step 4
# cntl-c the rackup process and start it back up.  It should come back with
  the workers and the config values that have been configured via the browser.


Things to try:


Expanding / Contracting workers

Note that after you set a max_count and before you publish, the count of workers will be
1 as their is just a single worker waiting for data on the queue.  Once you publish messages,
the count of workers will grow as needed to handle the message volume up to max_count.

If you set a value for idle_worker_timeout then the count of workers will go down when there
is no work to be done.  Set a timeout and refresh the attributes to see this in action.


Monitoring your workers

Browse to http://localhost:9292/Worker/Bar/timer/attributes.json?reset=true

Publish some messages (possibly modifying the worker's sleep times first) and browse to that address again.

If you use a monitoring tool such as munin, nagios, hyperic, etc., you could poll this url periodically to create
a graph or alert for your system.  For easy creation of munin graphs and alert withe this framework, see
https://github.com/ClarityServices/ruminate
